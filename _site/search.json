[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RV’s blog",
    "section": "",
    "text": "python\n\n\nR\n\n\nUK\n\n\nfinance\n\n\n\n\n\n\n\n\n\n\n\nDec 20, 2022\n\n\nRavi Verma\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nR\n\n\nUK\n\n\ninflation\n\n\n\n\n\n\n\n\n\n\n\nDec 15, 2022\n\n\nRavi Verma\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\nUK\n\n\ninflation\n\n\n\n\n\n\n\n\n\n\n\nDec 13, 2022\n\n\nRavi Verma\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nfinance\n\n\nmarkets\n\n\n\n\n\n\n\n\n\n\n\nSep 29, 2022\n\n\nRavi Verma\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython\n\n\n\n\n\n\n\n\n\n\n\nAug 10, 2022\n\n\nRavi Verma\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlinks\n\n\n\n\n\n\n\n\n\n\n\nAug 10, 2022\n\n\nRavi Verma\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 10, 2022\n\n\nRavi Verma\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "CFA Charterholder. Code in Python and R. Interested in finance, fantasy football and making blogs with Quarto :)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "My first attempt at blogging using Quarto",
    "section": "",
    "text": "Aiming to post content about Python, R, finance, fantasy football and any other random material that may apply."
  },
  {
    "objectID": "posts/links_about_quarto/index.html",
    "href": "posts/links_about_quarto/index.html",
    "title": "Useful links for Quarto",
    "section": "",
    "text": "https://beamilz.com/posts/2022-06-05-creating-a-blog-with-quarto/en/\nhttps://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html\nhttps://github.com/beatrizmilz/blog-en/blob/main/_quarto.yml\nhttps://quarto.org/docs/get-started/hello/jupyter.html\nhttps://quarto.org/docs/computations/python.html"
  },
  {
    "objectID": "posts/first_python_code/index.html",
    "href": "posts/first_python_code/index.html",
    "title": "First Python Code",
    "section": "",
    "text": "#library(reticulate)\n\n#conda_install(\"r-reticulate\", \"jupyter\")\n\nThis Python code is from https://quarto.org/docs/computations/python.html\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\n\nAlliance Bernstein - Quantitative Equity Research Associate 2020 - 2022\nJanus Henderson Investors - Investment/Liquidity Risk Analyst 2013 - 2020"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\nBSc Economics - University of Southampton 2010 - 2013\nMSc Artificial Intelligence - University of Bath 2022 - Present\nChartered Financial Analyst"
  },
  {
    "objectID": "posts/LDI_basics/index.html",
    "href": "posts/LDI_basics/index.html",
    "title": "LDI Market Dyamics",
    "section": "",
    "text": "https://bondvigilantes.com/blog/2022/09/collateral-calls/\nhttps://www.ft.com/content/038b30c3-f550-4cc0-93ed-9154021d6ee2\nhttps://www.ft.com/content/83927688-e0d1-4934-8d91-e279da6d6b6c\nhttps://criticalfinance.org/2022/09/29/pension-funds-and-liquidity-spirals/\nhttps://principlesandinterest.wordpress.com/2022/09/28/liability-driven-investment-ldi-quick-explainer/\n\nUltimately the issue is due to gilts being used as collateral for derivatives and the huge increase in gilt yields forcing margin calls therefore requiring pension funds to sell assets (liquid or otherwise) to meet those margin calls. Given the systemic nature of the issue, the Bank of England (BoE) had to step in to buy gilts and thus stabilizing yields.\nUseful graph/example to visualize assets and liabilities:\n\nUseful equation on how to think about pension funding:"
  },
  {
    "objectID": "posts/UK_inflation_data/index.html",
    "href": "posts/UK_inflation_data/index.html",
    "title": "UK CPIH Inflation Data",
    "section": "",
    "text": "# install.packages(\"rdbnomics\")\nlibrary(rdbnomics)\n\nWarning: package 'rdbnomics' was built under R version 4.2.2\n\n\nVisit <https://db.nomics.world>.\n\n\nWe’re interested in using the official inflation data by the Office for National Statistics which is the official provider of UK economic statistics.\nSpecifically we want CPIH data.\n\ndf_CPIH_monthly <- rdb(ids = \"ONS/MM23/L55O.M\")\n\nAs we’re doing the plotting in Python we want to attach the dataset so we can interact with Python and use specific plotting packages with respect to Python.\n\nattach(df_CPIH_monthly)\n\nLittle bit of code to install pandas so we can use later on.\n\n# library(reticulate)\n# conda_install(\"r-reticulate\", \"pandas\")\n\nChecking with Python code that we can use the CPIH data we recently downloaded earlier.\n\nimport pandas\ncpih_test =r.df_CPIH_monthly\nprint(cpih_test.head(5))\n\n  @frequency dataset_code  ...                                    Title value\n0    monthly         MM23  ...  CPIH ANNUAL RATE 00: ALL ITEMS 2015=100   NaN\n1    monthly         MM23  ...  CPIH ANNUAL RATE 00: ALL ITEMS 2015=100   NaN\n2    monthly         MM23  ...  CPIH ANNUAL RATE 00: ALL ITEMS 2015=100   NaN\n3    monthly         MM23  ...  CPIH ANNUAL RATE 00: ALL ITEMS 2015=100   NaN\n4    monthly         MM23  ...  CPIH ANNUAL RATE 00: ALL ITEMS 2015=100   NaN\n\n[5 rows x 15 columns]\n\n\nPlotting the CPIH data in Python using Matplotlib.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.dates as mdates\nimport datetime as dt\n\ndf_CPIH_monthly = r.df_CPIH_monthly\ndf_CPIH_monthly['value_percentage'] = df_CPIH_monthly['value'] / 100\n\nfig, ax = plt.subplots()\nax.plot(df_CPIH_monthly['period'], df_CPIH_monthly['value_percentage'])\nax.set_title(\"UK CPIH Inflation: 12 months to October 2022\")\nax.set_ylabel(\"Inflation Rate\")\nax.set_xlabel(\"Date\")\nax.yaxis.set_major_formatter(ticker.PercentFormatter(1))\nax.annotate(text='Data Source: DBnomics, Graphic by Ravi Verma',\n            xy=(0, 0),\n            xytext=(-60, -40),\n            fontsize=9,\n            xycoords='axes fraction',\n            textcoords='offset points')\nax.annotate(text='Latest inflation is 9.6%',\n            xy=(mdates.date2num(dt.datetime(2022, 10, 0o1)), 0.096),\n            xytext=(-120, -10),\n            fontsize=10,\n            xycoords='data',\n            textcoords='offset points',\n            wrap=True)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "test_quarto.html",
    "href": "test_quarto.html",
    "title": "Test",
    "section": "",
    "text": "@fig-airquality further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "inflation_docs/nov_22.html",
    "href": "inflation_docs/nov_22.html",
    "title": "UK CPI Inflation November 2022",
    "section": "",
    "text": "Show the code\n# plot 1\nggplot(df_overall_inflation, aes(period, value/100)) +\n  geom_line(lwd=1, colour=\"darkblue\") +\n  labs(x = \"Date\",\n       y='Inflation Rate (%)',\n       title = \"UK CPI Inflation: 12 months to November 2022\",\n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\n  geom_text_repel(aes(label = sprintf(\"The latest CPI reading is %s%%\", data_ends$value), fontface='bold'), data = data_ends) +\n  scale_y_continuous(labels = scales::label_percent(accuracy=0.1), breaks = seq(0,0.12, by=0.02)) + \n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        axis.line = element_line(size = 1.5, colour = \"black\"),\n        axis.text.x = element_text(size = 15, colour = \"black\"),\n        axis.text.y = element_text(size = 15, colour = \"black\"),\n        axis.title.x = element_text(size = 15, colour = \"black\"),\n        axis.title.y = element_text(size = 15, colour = \"black\")) +\n  geom_hline(yintercept=0.02, linetype=\"dashed\", color = \"black\", size=2) +\n  geom_text(aes(x=as.Date(\"1991-05-01\", \"%Y-%m-%d\"), y=0.02, label = \"BoE Target is 2%\", vjust = 0), nudge_y = -0.009, check_overlap = TRUE)\n\n\n\n\n\nAssessing inflation by breaking it down into Goods and Services.\n\n\n\n\n\nShow the code\n# plot 2\np <- ggplot(df_goods_services, aes(period, value/100, colour=stat_type)) + geom_line(lwd=1) \np + labs(x = \"Date\",\n       y='Inflation Rate (%)',\n       title = \"UK CPI Inflation: 12 months to November 2022\",\n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\n  scale_y_continuous(labels = scales::label_percent(accuracy=0.1), breaks = seq(0,0.16, by=0.02)) + \n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        axis.line = element_line(size = 1.5, colour = \"black\"),\n        axis.text.x = element_text(size = 15, colour = \"black\"),\n        axis.text.y = element_text(size = 15, colour = \"black\"),\n        axis.title.x = element_text(size = 15, colour = \"black\"),\n        axis.title.y = element_text(size = 15, colour = \"black\"),\n        legend.position = \"none\") +\n  geom_hline(yintercept=0.02, linetype=\"dashed\", color = \"black\", size=2) +\n  geom_text(aes(x=as.Date(\"1991-05-01\", \"%Y-%m-%d\"), y=0.02, label = \"BoE Target is 2%\", vjust = 0), nudge_y = -0.02, check_overlap = TRUE) +\n  geom_text(data = filter(df_goods_services, period == max(period)),aes(label = stat_type, x=as.Date(\"2018-01-01\", \"%Y-%m-%d\")),hjust = 0, nudge_x = -0.5, check_overlap = TRUE) +\ncoord_cartesian(clip = 'off') \n\n\n\n\n\nDecomposing CPI inflation into various sectors to see which contribute the highest to inflation.\n\n\n\n\n\nShow the code\n# plot 3\np <- ggplot(df, aes(period, value/100, colour=sector)) + geom_line(lwd=1) + scale_color_viridis(discrete = TRUE) \np + labs(x = \"Date\",\n         y='Inflation Rate (%)',\n         title = \"UK CPI Inflation: 12 months to November 2022 - Sectors\",\n         caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        axis.line = element_line(size = 1.5, colour = \"black\"),\n        axis.text.x = element_text(size = 15, colour = \"black\"),\n        axis.text.y = element_text(size = 15, colour = \"black\"),\n        axis.title.x = element_text(size = 15, colour = \"black\"),\n        axis.title.y = element_text(size = 15, colour = \"black\"),\n        legend.position = \"none\",\n        plot.margin = margin(0.1, 2.6, 0.1, 0.1, \"cm\")) +\n  scale_y_continuous(labels = label_percent(accuracy = 0.1)) +\n  geom_text(data = filter(df, period == max(period)),\n            aes(label = sector),\n            hjust = 0, nudge_x = 0.5, check_overlap = TRUE, size=2) +\n  coord_cartesian(clip = 'off') \n\n\n\n\n\nAnalyse inflation by sector looking at the time series of each sector individually.\n\n\nShow the code\n# plot 4\nggplot(df, aes(period, value/100)) +\n  geom_line(lwd=1) +\n  facet_wrap(vars(sector), nrow = 4) +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        panel.background = element_rect(fill = NA),\n        axis.line = element_line()) +\n  scale_y_continuous(labels = label_percent(accuracy = 0.1)) +\n  labs(x = \"Date\",\n       y='Contribution to Inflation Rate (%)',\n       title = \"UK CPI Inflation: Sector Contributions\", \n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\")\n\n\n\n\n\nWhat if we create a similar graph but change the y axis for each chart such that it is relative to each other.\n\n\nShow the code\n# plot 5 - relative scales\nggplot(df, aes(period, value/100)) +\n  geom_line(lwd=1) +\n  facet_wrap(vars(sector), scales = \"free_y\", nrow = 4) +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        panel.background = element_rect(fill = NA),\n        axis.line = element_line()) +\n  scale_y_continuous(labels = label_percent(accuracy = 0.1)) +\n  labs(x = \"Date\",\n       y='Contribution to Inflation Rate (%)',\n       title = \"UK CPI Inflation: Sector Contributions\", \n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\")\n\n\n\n\n\nSpecifically looking at the YoY inflation to November 2022 we can see which sectors contribute to inflation the most.\n\n\nShow the code\n# plot 6\nwaterfall(df_latest[,c(\"value\", 'sector')], calc_total = TRUE, total_rect_color = \"#ED7D31\", total_axis_text = \"Total (CPI Inflation)\", \n       fill_colours = rep(c(\"#4472C4\"), 12), fill_by_sign = FALSE) +\nlabs(x = \"Sectors\", y='Contribution to Inflation Rate (%)',\n     title = \"UK CPI Inflation: Sector Contributions\",\n     caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\ntheme(panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      panel.background = element_blank(),\n      axis.line = element_line(size = 1.5, colour = \"black\"),\n      axis.text.x = element_text(size = 5, colour = \"black\", angle = 90),\n      axis.text.y = element_text(size = 10, colour = \"black\"),\n      axis.title.x = element_text(size = 10, colour = \"black\"),\n      axis.title.y = element_text(size = 10, colour = \"black\")) +\nscale_y_continuous(limits = c(0,12) ,labels = label_number(accuracy = 0.01))"
  },
  {
    "objectID": "posts/UK_inflation_data_nov_22/index.html",
    "href": "posts/UK_inflation_data_nov_22/index.html",
    "title": "UK CPI Inflation November 2022",
    "section": "",
    "text": "Show the code\n# plot 1\nggplot(df_overall_inflation, aes(period, value/100)) +\n  geom_line(lwd=1, colour=\"darkblue\") +\n  labs(x = \"Date\",\n       y='Inflation Rate (%)',\n       title = \"UK CPI Inflation: 12 months to November 2022\",\n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\n  geom_text_repel(aes(label = sprintf(\"The latest CPI reading is %s%%\", data_ends$value), fontface='bold'), data = data_ends) +\n  scale_y_continuous(labels = scales::label_percent(accuracy=0.1), breaks = seq(0,0.12, by=0.02)) + \n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        axis.line = element_line(size = 1.5, colour = \"black\"),\n        axis.text.x = element_text(size = 15, colour = \"black\"),\n        axis.text.y = element_text(size = 15, colour = \"black\"),\n        axis.title.x = element_text(size = 15, colour = \"black\"),\n        axis.title.y = element_text(size = 15, colour = \"black\")) +\n  geom_hline(yintercept=0.02, linetype=\"dashed\", color = \"black\", size=2) +\n  geom_text(aes(x=as.Date(\"1991-05-01\", \"%Y-%m-%d\"), y=0.02, label = \"BoE Target is 2%\", vjust = 0), nudge_y = -0.009, check_overlap = TRUE)\n\n\n\n\n\nFigure 1: CPI inflation since 1990\n\n\n\n\nAssessing inflation by breaking it down into Goods and Services.\n\n\n\n\n\nShow the code\n# plot 2\np <- ggplot(df_goods_services, aes(period, value/100, colour=stat_type)) + geom_line(lwd=1) \np + labs(x = \"Date\",\n       y='Inflation Rate (%)',\n       title = \"UK CPI Inflation: 12 months to November 2022\",\n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\n  scale_y_continuous(labels = scales::label_percent(accuracy=0.1), breaks = seq(0,0.16, by=0.02)) + \n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        axis.line = element_line(size = 1.5, colour = \"black\"),\n        axis.text.x = element_text(size = 15, colour = \"black\"),\n        axis.text.y = element_text(size = 15, colour = \"black\"),\n        axis.title.x = element_text(size = 15, colour = \"black\"),\n        axis.title.y = element_text(size = 15, colour = \"black\"),\n        legend.position = \"none\") +\n  geom_hline(yintercept=0.02, linetype=\"dashed\", color = \"black\", size=2) +\n  geom_text(aes(x=as.Date(\"1991-05-01\", \"%Y-%m-%d\"), y=0.02, label = \"BoE Target is 2%\", vjust = 0), nudge_y = -0.02, check_overlap = TRUE) +\n  geom_text(data = filter(df_goods_services, period == max(period)),aes(label = stat_type, x=as.Date(\"2018-01-01\", \"%Y-%m-%d\")),hjust = 0, nudge_x = -0.5, check_overlap = TRUE) +\ncoord_cartesian(clip = 'off') \n\n\n\n\n\nFigure 2: CPI inflation by goods and services\n\n\n\n\nDecomposing CPI inflation into various sectors to see which contribute the highest to inflation.\n\n\n\n\n\nShow the code\n# plot 3\np <- ggplot(df, aes(period, value/100, colour=sector)) + geom_line(lwd=1) + scale_color_viridis(discrete = TRUE) \np + labs(x = \"Date\",\n         y='Inflation Rate (%)',\n         title = \"UK CPI Inflation: 12 months to November 2022 - Sectors\",\n         caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\n  theme(panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.background = element_blank(),\n        axis.line = element_line(size = 1.5, colour = \"black\"),\n        axis.text.x = element_text(size = 15, colour = \"black\"),\n        axis.text.y = element_text(size = 15, colour = \"black\"),\n        axis.title.x = element_text(size = 15, colour = \"black\"),\n        axis.title.y = element_text(size = 15, colour = \"black\"),\n        legend.position = \"none\",\n        plot.margin = margin(0.1, 2.6, 0.1, 0.1, \"cm\")) +\n  scale_y_continuous(labels = label_percent(accuracy = 0.1)) +\n  geom_text(data = filter(df, period == max(period)),\n            aes(label = sector),\n            hjust = 0, nudge_x = 0.5, check_overlap = TRUE, size=2) +\n  coord_cartesian(clip = 'off') \n\n\n\n\n\nFigure 3: Contribution to CPI inflation by sector\n\n\n\n\nAnalyse inflation by sector looking at the time series of each sector individually.\n\n\nShow the code\n# plot 4\nggplot(df, aes(period, value/100)) +\n  geom_line(lwd=1) +\n  facet_wrap(vars(sector), nrow = 4) +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        panel.background = element_rect(fill = NA),\n        axis.line = element_line()) +\n  scale_y_continuous(labels = label_percent(accuracy = 0.1)) +\n  labs(x = \"Date\",\n       y='Contribution to Inflation Rate (%)',\n       title = \"UK CPI Inflation: Sector Contributions\", \n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\")\n\n\n\n\n\nFigure 4: Contribution to CPI inflation by sector\n\n\n\n\nWhat if we create a similar graph but change the y axis for each chart such that it is relative to each other.\n\n\nShow the code\n# plot 5 - relative scales\nggplot(df, aes(period, value/100)) +\n  geom_line(lwd=1) +\n  facet_wrap(vars(sector), scales = \"free_y\", nrow = 4) +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        panel.background = element_rect(fill = NA),\n        axis.line = element_line()) +\n  scale_y_continuous(labels = label_percent(accuracy = 0.1)) +\n  labs(x = \"Date\",\n       y='Contribution to Inflation Rate (%)',\n       title = \"UK CPI Inflation: Sector Contributions\", \n       caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\")\n\n\n\n\n\nFigure 5: Contribution to CPI inflation by sector\n\n\n\n\nSpecifically looking at the YoY inflation to November 2022 we can see which sectors contribute to inflation the most.\n\n\nShow the code\n# plot 6\nwaterfall(df_latest[,c(\"value\", 'sector')], calc_total = TRUE, total_rect_color = \"#ED7D31\", total_axis_text = \"Total (CPI Inflation)\", \n       fill_colours = rep(c(\"#4472C4\"), 12), fill_by_sign = FALSE) +\nlabs(x = \"Sectors\", y='Contribution to Inflation Rate (%)',\n     title = \"UK CPI Inflation: Sector Contributions\",\n     caption = \"Data Source: ONS, DBnomics. Graphic by @Ravi Verma\") +\ntheme(panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      panel.background = element_blank(),\n      axis.line = element_line(size = 1.5, colour = \"black\"),\n      axis.text.x = element_text(size = 8, colour = \"black\", angle = 90),\n      axis.text.y = element_text(size = 10, colour = \"black\"),\n      axis.title.x = element_text(size = 10, colour = \"black\"),\n      axis.title.y = element_text(size = 10, colour = \"black\")) +\nscale_y_continuous(limits = c(0,12) ,labels = label_number(accuracy = 0.01))\n\n\n\n\n\nFigure 6: Contribution to CPI inflation by sector"
  },
  {
    "objectID": "posts/UK_mortgage_data/index.html",
    "href": "posts/UK_mortgage_data/index.html",
    "title": "UK Mortgage Data",
    "section": "",
    "text": "This blog post is about downloading and graphing average monthly interest mortgage data in the UK which is provided by the central bank, the Bank of England.\nThe Bank of England has a database https://www.bankofengland.co.uk/boeapps/database/\nInspired by https://www.datacareer.co.uk/blog/bank-of-england-s-statistical-interactive-database-iadb-using-python/"
  },
  {
    "objectID": "posts/UK_mortgage_data/index.html#coding",
    "href": "posts/UK_mortgage_data/index.html#coding",
    "title": "UK Mortgage Data",
    "section": "Coding",
    "text": "Coding\nImport python packages to download data from Bank of England website.\n\nimport pandas as pd\nimport requests\nimport io\n\nInstall any packages not already installed.\n\nlibrary(reticulate)\nconda_install(\"r-reticulate\", \"requests\")\n\nCreate arguments for request function from the Bank of England website. Here we specify the data points we want, the time period etc.\n\nurl_endpoint = 'http://www.bankofengland.co.uk/boeapps/iadb/fromshowcolumns.asp?csv.x=yes'\n\n\npayload = {\n    'Datefrom'   : '01/Jan/2015',\n    'Dateto'     : 'now',\n    'SeriesCodes': 'IUMBV34,IUMBV37,IUMBV42,IUMBV45',\n    'CSVF'       : 'TN',\n    'UsingCodes' : 'Y',\n    'VPD'        : 'Y',\n    'VFD'        : 'N'\n}\n\n\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) '\n                  'AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/54.0.2840.90 '\n                  'Safari/537.36'\n}\n\nCheck that the request has successfully completed.\n\nresponse = requests.get(url_endpoint, params=payload, headers=headers)\n\n\n# Check if the response was successful, it should return '200'\nprint(response.status_code)\n\n200\n\nprint(response.url)\n\nhttps://www.bankofengland.co.uk/boeapps/database/_iadb-FromShowColumns.asp?csv.x=yes&Datefrom=01%2FJan%2F2015&Dateto=now&SeriesCodes=IUMBV34%2CIUMBV37%2CIUMBV42%2CIUMBV45&CSVF=TN&UsingCodes=Y&VPD=Y&VFD=N\n\n\nDownload the data using pandas and read into a data frame.\n\ndf = pd.read_csv(io.BytesIO(response.content))\n\nCheck the data and the data types of each column.\n\ndf.head()\n\n          DATE  IUMBV34  IUMBV37  IUMBV42  IUMBV45\n0  31 Jan 2015     2.01     2.86     3.09     3.95\n1  28 Feb 2015     1.96     2.62     3.05     3.67\n2  31 Mar 2015     1.99     2.63     2.98     3.47\n3  30 Apr 2015     1.95     2.57     2.92     3.49\n4  31 May 2015     1.90     2.56     2.86     3.28\n\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 95 entries, 0 to 94\nData columns (total 5 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   DATE     95 non-null     object \n 1   IUMBV34  95 non-null     float64\n 2   IUMBV37  95 non-null     float64\n 3   IUMBV42  95 non-null     float64\n 4   IUMBV45  95 non-null     float64\ndtypes: float64(4), object(1)\nmemory usage: 3.8+ KB\n\n\nConvert the data column type into datetime.\n\ndf['DATE'] = pd.to_datetime(df['DATE'])\n\ndf.dtypes\n\nDATE       datetime64[ns]\nIUMBV34           float64\nIUMBV37           float64\nIUMBV42           float64\nIUMBV45           float64\ndtype: object\n\n\nFor plotting we will use ggplot and load other relevant packages.\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\nUse reticulate package to extract the python data frame into R\n\ndf <- py$df\n\ncolnames(df) <- c(\"date\", \"2 Yr 75% LTV\", \"3 Yr 75% LTV\", \"5 Yr 75% LTV\", \"10 Yr 75% LTV\")\n\nConvert the data frame from wide format into tidy format.\n\ndf_tidy <- pivot_longer(df, cols = 2:5, names_to = \"duration\")\n\nFor plotting we want the order of the legend to be in a specific order, e.g. 2 years to 3 to 5 to 10 etc. so we need to specify the order.\n\ndata_new <- df_tidy                            \ndata_new$duration <- factor(data_new$duration,     \n                         c(\"2 Yr 75% LTV\",  \"3 Yr 75% LTV\",  \"5 Yr 75% LTV\",  \"10 Yr 75% LTV\"))"
  },
  {
    "objectID": "posts/UK_mortgage_data/index.html#plotting",
    "href": "posts/UK_mortgage_data/index.html#plotting",
    "title": "UK Mortgage Data",
    "section": "Plotting",
    "text": "Plotting\nPlot the average monthly interest rates using ggplot as a line plot.\n\np <- ggplot(data_new, aes(date, value/100, colour=duration)) +\n  geom_line(lwd=1.4)\n\np + theme(panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.background = element_blank(),\n          axis.line = element_line(size = 1.5, colour = \"black\"),\n          axis.text.x = element_text(size = 10, colour = \"black\"),\n          axis.text.y = element_text(size = 10, colour = \"black\"),\n          axis.title.x = element_text(size = 10, colour = \"black\"),\n          axis.title.y = element_text(size = 10, colour = \"black\"),\n          legend.background = element_rect(fill = NA),\n          legend.key = element_rect(fill = NA, color = NA)) + \n    labs(x = \"Date\",\n          y= \"Average Mortgage Interest Rate (%)\",\n          title = \"Average Monthly Interest Rate on Fixed Rate Mortgages in the UK\",\n          caption = \"Data Source: Bank of England. Updated to end November 2022. Graphic by @Ravi Verma\",\n         colour=\"Mortgage Duration\") +\n  scale_color_manual(values = c(\"#4472C4\", \"#ED7D31\", \"#A5A5A5\", \"#FFC000\")) +\n  scale_y_continuous(labels = scales::label_percent(accuracy=0.1)) +\n  geom_text(data = filter(data_new, date == max(date)),\n            aes(label = sprintf(\"The latest average rate is %s%%\", value)), show.legend = FALSE, nudge_x = -75000000)\n\n\n\n\nFigure 1: Average Mortgage Rates Through Time\n\n\n\n\nPlot the average monthly interest rates using ggplot as a box plot.\n\np <- ggplot(data_new, aes(x=duration, y=value/100, color=duration))\np + geom_boxplot() +\n  theme(panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.background = element_blank(),\n          axis.line = element_line(size = 1.5, colour = \"black\"),\n          axis.text.x = element_text(size = 10, colour = \"black\"),\n          axis.text.y = element_text(size = 10, colour = \"black\"),\n          axis.title.x = element_text(size = 10, colour = \"black\"),\n          axis.title.y = element_text(size = 10, colour = \"black\"),\n                  legend.background = element_rect(fill = NA),\n          legend.key = element_rect(fill = NA, color = NA)) +\n  scale_color_manual(values = c(\"#4472C4\", \"#ED7D31\", \"#A5A5A5\", \"#FFC000\")) +\n      labs(x = \"Mortgage Duration / Loan to Value\",\n          y= \"Average Mortgage Interest Rate (%)\",\n          title = \"Boxplot of Monthly Interest Rates on Fixed Rate Mortgages in the UK\",\n          caption = \"Data Source: Bank of England. Updated to end November 2022. Graphic by @Ravi Verma\",\n          colour=\" Mortgage Duration\") +\n    scale_y_continuous(labels = scales::label_percent(accuracy=0.1))\n\n\n\n\nFigure 2: Boxplot of Average Mortgage Rates"
  }
]