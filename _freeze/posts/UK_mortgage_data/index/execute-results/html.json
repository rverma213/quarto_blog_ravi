{
  "hash": "74949ce4d3ba0c96d159a3e6ed37c2b8",
  "result": {
    "markdown": "---\ntitle: \"UK Mortgage Data\"\nauthor: \"Ravi Verma\"\ndate: \"2022-12-20\"\ncategories: [python,R,UK,finance]\n---\n\n\n## Aim\n\nThis blog post is about downloading and graphing average monthly interest mortgage data in the UK which is provided by the central bank, the Bank of England.\n\nThe Bank of England has a database <https://www.bankofengland.co.uk/boeapps/database/>\n\nInspired by <https://www.datacareer.co.uk/blog/bank-of-england-s-statistical-interactive-database-iadb-using-python/>\n\n## Coding\n\nImport python packages to download data from Bank of England website.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport requests\nimport io\n```\n:::\n\n\nInstall any packages not already installed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\nconda_install(\"r-reticulate\", \"requests\")\n```\n:::\n\n\nCreate arguments for request function from the Bank of England website. Here we specify the data points we want, the time period etc.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nurl_endpoint = 'http://www.bankofengland.co.uk/boeapps/iadb/fromshowcolumns.asp?csv.x=yes'\n\n\npayload = {\n    'Datefrom'   : '01/Jan/2015',\n    'Dateto'     : 'now',\n    'SeriesCodes': 'IUMBV34,IUMBV37,IUMBV42,IUMBV45',\n    'CSVF'       : 'TN',\n    'UsingCodes' : 'Y',\n    'VPD'        : 'Y',\n    'VFD'        : 'N'\n}\n\n\n\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) '\n                  'AppleWebKit/537.36 (KHTML, like Gecko) '\n                  'Chrome/54.0.2840.90 '\n                  'Safari/537.36'\n}\n```\n:::\n\n\nCheck that the request has successfully completed.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nresponse = requests.get(url_endpoint, params=payload, headers=headers)\n\n\n# Check if the response was successful, it should return '200'\nprint(response.status_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n200\n```\n:::\n\n```{.python .cell-code}\nprint(response.url)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhttps://www.bankofengland.co.uk/boeapps/database/_iadb-FromShowColumns.asp?csv.x=yes&Datefrom=01%2FJan%2F2015&Dateto=now&SeriesCodes=IUMBV34%2CIUMBV37%2CIUMBV42%2CIUMBV45&CSVF=TN&UsingCodes=Y&VPD=Y&VFD=N\n```\n:::\n:::\n\n\nDownload the data using pandas and read into a data frame.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.read_csv(io.BytesIO(response.content))\n```\n:::\n\n\nCheck the data and the data types of each column.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          DATE  IUMBV34  IUMBV37  IUMBV42  IUMBV45\n0  31 Jan 2015     2.01     2.86     3.09     3.95\n1  28 Feb 2015     1.96     2.62     3.05     3.67\n2  31 Mar 2015     1.99     2.63     2.98     3.47\n3  30 Apr 2015     1.95     2.57     2.92     3.49\n4  31 May 2015     1.90     2.56     2.86     3.28\n```\n:::\n\n```{.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 95 entries, 0 to 94\nData columns (total 5 columns):\n #   Column   Non-Null Count  Dtype  \n---  ------   --------------  -----  \n 0   DATE     95 non-null     object \n 1   IUMBV34  95 non-null     float64\n 2   IUMBV37  95 non-null     float64\n 3   IUMBV42  95 non-null     float64\n 4   IUMBV45  95 non-null     float64\ndtypes: float64(4), object(1)\nmemory usage: 3.8+ KB\n```\n:::\n:::\n\n\nConvert the data column type into datetime.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf['DATE'] = pd.to_datetime(df['DATE'])\n\ndf.dtypes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDATE       datetime64[ns]\nIUMBV34           float64\nIUMBV37           float64\nIUMBV42           float64\nIUMBV45           float64\ndtype: object\n```\n:::\n:::\n\n\nFor plotting we will use ggplot and load other relevant packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n```\n:::\n\n\nUse reticulate package to extract the python data frame into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- py$df\n\ncolnames(df) <- c(\"date\", \"2 Yr 75% LTV\", \"3 Yr 75% LTV\", \"5 Yr 75% LTV\", \"10 Yr 75% LTV\")\n```\n:::\n\n\nConvert the data frame from wide format into tidy format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_tidy <- pivot_longer(df, cols = 2:5, names_to = \"duration\")\n```\n:::\n\n\nFor plotting we want the order of the legend to be in a specific order, e.g. 2 years to 3 to 5 to 10 etc. so we need to specify the order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_new <- df_tidy                            \ndata_new$duration <- factor(data_new$duration,     \n                         c(\"2 Yr 75% LTV\",  \"3 Yr 75% LTV\",  \"5 Yr 75% LTV\",  \"10 Yr 75% LTV\"))\n```\n:::\n\n\n## Plotting\n\nPlot the average monthly interest rates using ggplot as a line plot.\n\n\n::: {.cell .fig-column-page-right .caption-margin}\n\n```{.r .cell-code}\np <- ggplot(data_new, aes(date, value/100, colour=duration)) +\n  geom_line(lwd=1.4)\n\np + theme(panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.background = element_blank(),\n          axis.line = element_line(size = 1.5, colour = \"black\"),\n          axis.text.x = element_text(size = 10, colour = \"black\"),\n          axis.text.y = element_text(size = 10, colour = \"black\"),\n          axis.title.x = element_text(size = 10, colour = \"black\"),\n          axis.title.y = element_text(size = 10, colour = \"black\"),\n          legend.background = element_rect(fill = NA),\n          legend.key = element_rect(fill = NA, color = NA)) + \n    labs(x = \"Date\",\n          y= \"Average Mortgage Interest Rate (%)\",\n          title = \"Average Monthly Interest Rate on Fixed Rate Mortgages in the UK\",\n          caption = \"Data Source: Bank of England. Updated to end November 2022. Graphic by @Ravi Verma\",\n         colour=\"Mortgage Duration\") +\n  scale_color_manual(values = c(\"#4472C4\", \"#ED7D31\", \"#A5A5A5\", \"#FFC000\")) +\n  scale_y_continuous(labels = scales::label_percent(accuracy=0.1)) +\n  geom_text(data = filter(data_new, date == max(date)),\n            aes(label = sprintf(\"The latest average rate is %s%%\", value)), show.legend = FALSE, nudge_x = -75000000)\n```\n\n::: {.cell-output-display}\n![Average Mortgage Rates Through Time](index_files/figure-html/fig-cap-margin2-1.png){#fig-cap-margin2 width=672}\n:::\n:::\n\n\nPlot the average monthly interest rates using ggplot as a box plot.\n\n\n::: {.cell .fig-column-page-right .caption-margin}\n\n```{.r .cell-code}\np <- ggplot(data_new, aes(x=duration, y=value/100, color=duration))\np + geom_boxplot() +\n  theme(panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.background = element_blank(),\n          axis.line = element_line(size = 1.5, colour = \"black\"),\n          axis.text.x = element_text(size = 10, colour = \"black\"),\n          axis.text.y = element_text(size = 10, colour = \"black\"),\n          axis.title.x = element_text(size = 10, colour = \"black\"),\n          axis.title.y = element_text(size = 10, colour = \"black\"),\n                  legend.background = element_rect(fill = NA),\n          legend.key = element_rect(fill = NA, color = NA)) +\n  scale_color_manual(values = c(\"#4472C4\", \"#ED7D31\", \"#A5A5A5\", \"#FFC000\")) +\n      labs(x = \"Mortgage Duration / Loan to Value\",\n          y= \"Average Mortgage Interest Rate (%)\",\n          title = \"Boxplot of Monthly Interest Rates on Fixed Rate Mortgages in the UK\",\n          caption = \"Data Source: Bank of England. Updated to end November 2022. Graphic by @Ravi Verma\",\n          colour=\" Mortgage Duration\") +\n    scale_y_continuous(labels = scales::label_percent(accuracy=0.1))\n```\n\n::: {.cell-output-display}\n![Boxplot of Average Mortgage Rates](index_files/figure-html/fig-cap-margin3-1.png){#fig-cap-margin3 width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}